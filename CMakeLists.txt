cmake_minimum_required(VERSION 3.24..3.31)
project(game)

# use current timestamp when extracting archives with ExternalProject or FetchContent
cmake_policy(SET CMP0135 NEW)

# emscripten
if (EMSCRIPTEN)
    set(CMAKE_EXECUTABLE_SUFFIX .html)
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} --shell-file ${CMAKE_CURRENT_SOURCE_DIR}/template.html")
endif()

# Options
option(ZORRO_ENABLE_SDL "Enable SDL engine" ON)

# needed for SDL3
set(BUILD_SHARED_LIBS OFF)

### dependencies
include(FetchContent)
mark_as_advanced(FETCHCONTENT_BASE_DIR FETCHCONTENT_FULLY_DISCONNECTED FETCHCONTENT_QUIET FETCHCONTENT_UPDATES_DISCONNECTED)

# SDL3
if (ZORRO_ENABLE_SDL)
    FetchContent_Declare(
        sdl3
        URL https://github.com/libsdl-org/SDL/releases/download/release-3.2.22/SDL3-3.2.22.tar.gz
    )
    FetchContent_MakeAvailable(sdl3)
    mark_as_advanced(FETCHCONTENT_SOURCE_DIR_SDL3 FETCHCONTENT_UPDATES_DISCONNECTED_SDL3)
    mark_as_advanced(LibUSB_COMPILE_OPTIONS LibUSB_INCLUDE_PATH LibUSB_LIBRARY LibUSB_LINK_FLAGS LibUSB_LINK_LIBRARIES)
    mark_as_advanced(SDL_ALSA SDL_ASAN SDL_ASSEMBLY SDL_ASSERTIONS SDL_AUDIO SDL_AVX SDL_AVX2
        SDL_AVX512F SDL_BACKGROUNDING_SIGNAL SDL_CAMERA SDL_CCACHE SDL_CLANG_TIDY
        SDL_CLOCK_GETTIME SDL_CPU_ARM32 SDL_CPU_ARM64 SDL_CPU_ARM64EC SDL_CPU_EMSCRIPTEN
        SDL_CPU_LOONGARCH64 SDL_CPU_POWERPC32 SDL_CPU_POWERPC64 SDL_CPU_X64 SDL_CPU_X86
        SDL_DEPS_SHARED SDL_DIALOG SDL_DIRECTX SDL_DISKAUDIO SDL_DUMMYAUDIO SDL_DUMMYCAMERA
        SDL_DUMMYVIDEO SDL_EXAMPLES SDL_FOREGROUNDING_SIGNAL SDL_GCC_ATOMICS SDL_GPU SDL_GPU_DXVK
        SDL_HAPTIC SDL_HIDAPI SDL_HIDAPI_JOYSTICK SDL_HIDAPI_LIBUSB SDL_HIDAPI_LIBUSB_SHARED SDL_INSTALL
        SDL_INSTALL_CMAKEDIR_ROOT SDL_JACK SDL_JOYSTICK SDL_KMSDRM SDL_LIBC SDL_LIBICONV SDL_LIBUDEV
        SDL_MMX SDL_OFFSCREEN SDL_OPENGL SDL_OPENGLES SDL_OPENVR SDL_PIPEWIRE SDL_POWER SDL_PRESEED
        SDL_PTHREADS SDL_PULSEAUDIO SDL_RENDER SDL_RENDER_D3D SDL_RENDER_D3D11 SDL_RENDER_D3D12
        SDL_RENDER_GPU SDL_RENDER_METAL SDL_RENDER_VULKAN SDL_RPATH SDL_SENSOR SDL_SHARED SDL_SNDIO
        SDL_SSE SDL_SSE2 SDL_SSE3 SDL_SSE4_1 SDL_SSE4_2 SDL_STATIC SDL_SYSTEM_ICONV SDL_TESTS
        SDL_TESTS_TIMEOUT_MULTIPLIER SDL_TEST_LIBRARY SDL_UNINSTALL SDL_VENDOR_INFO SDL_VIDEO
        SDL_VIRTUAL_JOYSTICK SDL_VULKAN SDL_WASAPI SDL_WAYLAND SDL_WERROR SDL_X11 SDL_XINPUT)
endif()

# GLM
FetchContent_Declare(
    glm
    GIT_REPOSITORY https://github.com/g-truc/glm.git
    GIT_TAG bf71a834948186f4097caa076cd2663c69a10e1e
    GIT_SHALLOW 1
)
FetchContent_MakeAvailable(glm)
mark_as_advanced(FETCHCONTENT_SOURCE_DIR_GLM FETCHCONTENT_UPDATES_DISCONNECTED_GLM)

### executable
file(GLOB SOURCE_FILES *.cpp *.c)
file(GLOB HEADER_FILES *.hpp *.h)

if (ZORRO_ENABLE_SDL)
    file(GLOB SDL_SOURCE_FILES sdl/*.cpp sdl/*.c)
    file(GLOB SDL_HEADER_FILES sdl/*.hpp sdl/*.h)
    list(APPEND SOURCE_FILES ${SDL_SOURCE_FILES})
    list(APPEND HEADER_FILES ${SDL_HEADER_FILES})
endif()

add_executable(${PROJECT_NAME} ${SOURCE_FILES} ${HEADER_FILES})

if (NOT MSVC)
    target_compile_options(${PROJECT_NAME} PRIVATE -fno-exceptions)
endif()

target_compile_features(${PROJECT_NAME} PUBLIC cxx_std_17)
target_link_libraries(${PROJECT_NAME}
    PUBLIC
        glm::glm
)

if (WIN32)
    target_link_libraries(${PROJECT_NAME}
        PUBLIC
            shlwapi.lib
    )
endif()

if (ZORRO_ENABLE_SDL)
    target_include_directories(${PROJECT_NAME}
        PUBLIC
            sdl
    )
    target_link_libraries(${PROJECT_NAME}
        PUBLIC
            SDL3::SDL3
    )
endif()

